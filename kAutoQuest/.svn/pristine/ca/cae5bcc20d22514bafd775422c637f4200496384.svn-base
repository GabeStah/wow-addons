local _G = _G
local BEST_ARMOR_TYPES2 = {
	DEATHKNIGHT = 'Plate',
	DRUID = 'Leather',
	HUNTER = {'Mail', 'Leather'},
	MAGE = 'Cloth',
	MONK = 'Leather',
	PALADIN = {'Plate', 'Mail'},
	PRIEST = 'Cloth',
	ROGUE = 'Leather',
	SHAMAN = {'Mail', 'Leather'},
	WARRIOR = {'Plate', 'Mail'},
	WARLOCK = 'Cloth',
};
local BEST_ARMOR_TYPES = {
	DEATHKNIGHT = 'Plate',
	DRUID = 'Leather',
	HUNTER = {'Mail', 'Leather'},
	MAGE = 'Cloth',
	MONK = 'Leather',
	PALADIN = {'Plate', 'Mail'},
	PRIEST = 'Cloth',
	ROGUE = 'Leather',
	SHAMAN = {'Mail', 'Leather'},
	WARRIOR = {'Plate', 'Mail'},
	WARLOCK = 'Cloth',
};
local QUEST_FADING_DEFAULT_VALUE = 9999;
local ARMOR_TYPE_SLOTS = {1,3,5,6,7,8,9,10,};
local HEIRLOOM_EXP_SLOTS = {1,3,5,11,12,15,};
local TOOLTIP_COLOR_RED = {r=1,g=0.1255,b=0.1255,a=1}
local ITEM_EQUIP_LOCS = {
	{name = "INVTYPE_AMMO", slotName = "AmmoSlot", slotNumber = 0, formattedName = "Ammo",},
	{name = "INVTYPE_HEAD", slotName = "HeadSlot", slotNumber = 1, formattedName = "Head",},
	{name = "INVTYPE_NECK", slotName = "NeckSlot", slotNumber = 2, formattedName = "Neck",},
	{name = "INVTYPE_SHOULDER", slotName = "ShoulderSlot", slotNumber = 3, formattedName = "Shoulder",},
	{name = "INVTYPE_BODY", slotName = "ShirtSlot", slotNumber = 4, formattedName = "Shirt",},
	{name = "INVTYPE_CHEST", slotName = "ChestSlot", slotNumber = 5, formattedName = "Chest",},
	{name = "INVTYPE_ROBE", slotName = "ChestSlot", slotNumber = 5, formattedName = "Chest",},
	{name = "INVTYPE_WAIST", slotName = "WaistSlot", slotNumber = 6, formattedName = "Waist",},
	{name = "INVTYPE_LEGS", slotName = "LegsSlot", slotNumber = 7, formattedName = "Legs",},
	{name = "INVTYPE_FEET", slotName = "FeetSlot", slotNumber = 8, formattedName = "Feet",},
	{name = "INVTYPE_WRIST", slotName = "WristSlot", slotNumber = 9, formattedName = "Wrist",},
	{name = "INVTYPE_HAND", slotName = "HandsSlot", slotNumber = 10, formattedName = "Hands",},
	{name = "INVTYPE_FINGER", slotName = "Finger0Slot", slotNumber = {11,12}, formattedName = "Finger",},
	{name = "INVTYPE_TRINKET", slotName = "Trinket0Slot", slotNumber = {13,14}, formattedName = "Trinket",},
	{name = "INVTYPE_CLOAK", slotName = "BackSlot", slotNumber = 15, formattedName = "Back",},
	{name = "INVTYPE_WEAPON", slotName = "MainHandSlot", slotNumber = 16, formattedName = "Main Hand",},
	{name = "INVTYPE_SHIELD", slotName = "SecondaryHandSlot", slotNumber = 17, formattedName = "Offhand",},
	{name = "INVTYPE_2HWEAPON", slotName = "MainHandSlot", slotNumber = 16, formattedName = "Main Hand",},
	{name = "INVTYPE_WEAPONMAINHAND", slotName = "MainHandSlot", slotNumber = 16, formattedName = "Main Hand",},
	{name = "INVTYPE_WEAPONOFFHAND", slotName = "SecondaryHandSlot", slotNumber = 17, formattedName = "Offhand",},
	{name = "INVTYPE_HOLDABLE", slotName = "SecondaryHandSlot", slotNumber = 17, formattedName = "Offhand",},
	{name = "INVTYPE_RANGED", slotName = "RangedSlot", slotNumber = 18, formattedName = "Ranged",},
	{name = "INVTYPE_THROWN", slotName = "RangedSlot", slotNumber = 18, formattedName = "Ranged",},
	{name = "INVTYPE_RANGEDRIGHT", slotName = "RangedSlot", slotNumber = 18, formattedName = "Ranged",},
	{name = "INVTYPE_RELIC", slotName = "RangedSlot", slotNumber = 18, formattedName = "Ranged",},
	{name = "INVTYPE_TABARD", slotName = "TabardSlot", slotNumber = 19, formattedName = "Tabard",},
	{name = "INVTYPE_BAG", slotName = "Bag0Slot", slotNumber = 20, formattedName = "Bag",},
	{name = "INVTYPE_QUIVER", slotName = nil, slotNumber = 20, formattedName = "Ammo",},
};
local kAutoQuest = LibStub("AceAddon-3.0"):NewAddon("kAutoQuest", "AceConsole-3.0", "AceEvent-3.0", "AceTimer-3.0")
kAutoQuest.completed_quests = {}
kAutoQuest.uncompleted_quests = {}
kAutoQuest.TIMERS = {};

kAutoQuest.defaults = {
	profile = {
		debug = {
			enabled = false,
			threshold = 1,
		},
		itemsToBeSold = {},		
		merchant = {
			autoSellHighValue = false,
			autoSellJunk = false,
		},
		rewardAutomation = {
			defaultSelectTrinket = true,
			enabled = true,
			equipUpgrades = false,	
			heirloomIgnoreLevels = 2,
			minLevel = 1,
			maxLevel = 85,
			pawnScaleSelected = 'None',
			percentUpgradeThreshold = 0.05,
			retainHeirlooms = true,
			suppressOutput = false,			
		},
		whitelist = {},
	},
};

function kAutoQuest:OnInitialize()
	-- Load Database
    self.db = LibStub("AceDB-3.0"):New("kAutoQuestDB", self.defaults)
    -- Inject Options Table and Slash Commands
	self.options.args.profile = LibStub("AceDBOptions-3.0"):GetOptionsTable(self.db)
	self.config = LibStub("AceConfig-3.0")
	self.config:RegisterOptionsTable("kAutoQuestDB", self.options)
	self.config:RegisterOptionsTable("kAutoQuestAutomation", self.questRewardAutomation)
	self.config:RegisterOptionsTable("kAutoQuestMerchant", self.merchant)
	self.config:RegisterOptionsTable("kAutoQuestWhitelist", self.whitelist)
	self.optParent = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("kAutoQuestDB", "kAutoQuest");
	self.opt1 = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("kAutoQuestAutomation", "Reward Automation", "kAutoQuest");
	self.opt2 = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("kAutoQuestMerchant", "Merchant Settings", "kAutoQuest");
	self.opt3 = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("kAutoQuestWhitelist", "Whitelist Items", "kAutoQuest");
	
	self.frame = CreateFrame("Frame", "kAutoQuestFrame")
	self.frame:SetScript('OnEvent', self.onevent)
	
	self:RegisterEvent('GOSSIP_SHOW')
	self:RegisterEvent('QUEST_COMPLETE')
	self:RegisterEvent('QUEST_DETAIL')
	--self:RegisterEvent('QUEST_FINISHED')
	self:RegisterEvent('QUEST_GREETING')
	self:RegisterEvent('QUEST_LOG_UPDATE')
	self:RegisterEvent('QUEST_PROGRESS')	
	self:RegisterEvent('MERCHANT_SHOW')
	self:RegisterEvent('MERCHANT_CLOSED')
	self:RegisterChatCommand('kautoquest', 'OpenOptions')
	self:RegisterChatCommand('kaq', 'OpenOptions')
end

function kAutoQuest:OpenOptions()
	InterfaceOptionsFrame_OpenToCategory(self.opt1)
end

function kAutoQuest:IsPawnLoaded()
	return IsAddOnLoaded('Pawn');
end

function kAutoQuest:FixQuestDetailFading()
	if QuestInfoDescriptionText then
		QuestInfoDescriptionText:SetAlphaGradient(0, QUEST_FADING_DEFAULT_VALUE)
	end
end

function kAutoQuest:GetScaleListValues()
	local scales;
	if kAutoQuest:IsPawnLoaded() then scales = PawnGetAllScalesEx() end
	local out = {};
	out['None'] = 'None';
	if scales then for i,v in pairs(scales) do if v.IsVisible then out[v.Name] = v.Name end end end
	-- 	{ Name, LocalizedName, Header, IsVisible }
	return out;	
end

function kAutoQuest:OnEnable()
end
function kAutoQuest:OnDisable()
end

function kAutoQuest:MERCHANT_SHOW()
	local itemLink, quality, itemID;
	local earnings, sellPrice = 0, 0;
	for bagID=0,4 do
		for bagSlotID=1,GetContainerNumSlots(bagID) do
			itemLink = GetContainerItemLink(bagID,bagSlotID)			
			if itemLink then
				_,_,quality,_,_,_,_,_,_,_,sellPrice = GetItemInfo(itemLink)
				itemID = self:GetItemIdFromItemLink(itemLink)
				if quality == 0 and self.db.profile.merchant.autoSellJunk then -- Sell junk
					UseContainerItem(bagID,bagSlotID)
					earnings = earnings + sellPrice
					self:Debug(('Selling junk item %s for %s'):format(itemLink, GetCoinTextureString(sellPrice)), 3)
				elseif self.db.profile.itemsToBeSold[itemID] and self.db.profile.merchant.autoSellHighValue and quality <= 3 then -- never sell epic or higher items to be safe
					self.db.profile.itemsToBeSold[itemID] = nil
					UseContainerItem(bagID,bagSlotID)
					earnings = earnings + sellPrice
					self:Debug(('Selling high-value item %s for %s'):format(itemLink, GetCoinTextureString(sellPrice)), 3)
				end
			end
		end
	end
	if earnings > 0 then self:Output(('Auto-sold items for %s'):format(GetCoinTextureString(earnings))) end
	wipe(self.db.profile.itemsToBeSold) -- wipe auto-sell table for safety
end
function kAutoQuest:MERCHANT_CLOSED()
	self:Debug('MERCHANT_CLOSED', 3)
end

function kAutoQuest:EquipItem(args)
	local item, slotID;
	if type(args) == 'table' then item = args[1]; slotID = args[2] end
	if not item then return end
	if not GetItemInfo(item) then return end
	-- Check for combat lock
	if not InCombatLockdown() and not UnitIsDeadOrGhost('player') then
		-- If not locked, equip item and cancel timer
		self:Output(('%s %s'):format('Auto-equipping upgrade item', select(2,GetItemInfo(item))))
		EquipItemByName(item, slotID)
		self:CancelTimerByItem(item)
	end
end

function kAutoQuest:CancelTimerByItem(item)
	-- Cancel direct
	if self.TIMERS[item] then self:CancelTimer(self.TIMERS[item].timer, true) end
	-- Loop through and check item ids
	for i,v in pairs(self.TIMERS) do
		if v.id == item then
			self:CancelTimer(self.TIMERS[i].timer, true);
			self.TIMERS[i] = nil;
		end
	end
	-- While
	while self.TIMERS[item] do
		self:CancelTimer(self.TIMERS[item].timer, true)
		self.TIMERS[item] = nil;
	end
end

function kAutoQuest:GetItemIdFromItemLink(link)
	if link then
		local found, _, itemString = string.find(link, "^|c%x+|H(.+)|h%[.*%]")
		local _, itemId = strsplit(":", itemString)	
		if itemId then return itemId end
	end
	return nil
end

function kAutoQuest:CanAutomate()
	if IsShiftKeyDown() then
		return false
	else
		return true
	end
end

function kAutoQuest:strip_text(text)
	if not text then return end
	text = text:gsub('|c%x%x%x%x%x%x%x%x(.-)|r','%1')
	text = text:gsub('%[.*%]%s*','')
	text = text:gsub('(.+) %(.+%)', '%1')
	text = text:trim()
	return text
end

function kAutoQuest:QUEST_PROGRESS()
	self:Debug('QUEST_PROGRESS', 3)
	if not self:CanAutomate() then return end
	if IsQuestCompletable() then
		self:Debug({'IsQuestCompletable()', true}, 3)
		CompleteQuest()
		self:FixQuestDetailFading()
	end
end

function kAutoQuest:QUEST_LOG_UPDATE()
	if not self:CanAutomate() then return end
	local start_entry = GetQuestLogSelection()
	local num_entries = GetNumQuestLogEntries()
	local title
	local is_complete
	local no_objectives

	self.completed_quests = {}
	self.uncompleted_quests = {}

	if num_entries > 0 then
		for i = 1, num_entries do
			SelectQuestLogEntry(i)
			title, _, _, _, _, _, is_complete = GetQuestLogTitle(i)
			no_objectives = GetNumQuestLeaderBoards(i) == 0
			if title and (is_complete or no_objectives) then
				self.completed_quests[title] = true
			else
				self.uncompleted_quests[title] = true
			end
		end
	end

	SelectQuestLogEntry(start_entry)
	self:FixQuestDetailFading()
end
function kAutoQuest:GOSSIP_SHOW()
	if not self:CanAutomate() then return end

	local button
	local text

	for i = 1, 32 do
		button = _G['GossipTitleButton' .. i]
		if button:IsVisible() then
			text = self:strip_text(button:GetText())
			ABCDE={button:GetText(), text}
			if button.type == 'Available' then
				button:Click()
			elseif button.type == 'Active' then
				if self.completed_quests[text] then
					button:Click()
				end
			end
		end
	end
	self:FixQuestDetailFading()
end

function kAutoQuest:QUEST_GREETING(...)
	if not self:CanAutomate() then return end

	local button
	local text

	for i = 1, 32 do
		button = _G['QuestTitleButton' .. i]
		if button:IsVisible() then
			text = self:strip_text(button:GetText())
			if self.completed_quests[text] then
				button:Click()
			elseif not self.uncompleted_quests[text] then
				button:Click()
			end
		end
	end
	self:FixQuestDetailFading()
end

function kAutoQuest:QUEST_DETAIL()
	if not self:CanAutomate() then return end
	AcceptQuest()
	self:FixQuestDetailFading()	
end
--[[

1. EVENT_QUEST_TURNIN
2. Check if auto-selection enabled
3. Check if character level is within threshold range
4. Check if special scenario (multitrinket) that cannot automate
5. Assign each selectable reward a TYPE (equippable, vendor, whitelist, etc)
6. Assign each selectable reward a RATING score, based on upgrade percentage
7. Assign each selectable reward a VENDOR value.
8. Check for highest RATING value in list.
8a. RATING is based on % upgrade.
9. Select highest RATING if exists, select highest VENDOR value if not.
10. Check for special scenario 100% upgrade and weapon slots
11. Trigger GetQuestReward for appropriate selection.
12. Enable eventual-expiration timer for auto-equip if active
13. Output appropriate indication message for selection.

]]

function kAutoQuest:ProcessQuestCompletion()
	if not self:CanAutomate() then return end
	local iQuestChoices, rewards = GetNumQuestChoices();
	if not iQuestChoices or iQuestChoices == 0 then GetQuestReward(1) return end -- Complete quest if no selectable items
	if not self:GetOptionValue('rewardAutomation', 'enabled') then return end -- Check if enabled
	if not self:IsValidCharacterLevel() then return end -- Check character level
	if not self:IsPawnLoaded() then return end -- Check if Pawn is loaded
	for iQuestChoice=1,iQuestChoices do
		local itemLink = GetQuestItemLink('choice', iQuestChoice);
		local itemID = self:GetItemIdFromItemLink(itemLink);
		if itemID then 
			rewards = rewards or {};
			tinsert(rewards, {
				currentItemID = self:GetPawnCurrentItem(itemID),
				equippable = self:IsItemEquippable(itemID),
				ID = itemID,
				index = iQuestChoice,
				isTrinket = self:IsItemTrinket(itemID),
				link = itemLink,
				rating = self:GetItemRating(itemID),
				replacesHeirloom = self:DoesItemReplaceHeirloom(itemID),
				replacesExpHeirloom = self:DoesItemReplaceExpHeirloom(itemID),
				slot = self:GetItemEquipSlot(itemID),	
				value =  self:GetItemVendorValue(itemID),
			})
		end
	end
	if rewards then
		-- Special scenarios
		-- Whitelist
		for i,v in pairs(rewards) do
			if self:DoesWhitelistItemExist(v.ID) or self:DoesWhitelistItemExist(GetItemInfo(v.ID)) then
				self:SelectQuestReward(v, 'whitelist')
				return
			end			
		end
		-- Multi-trinkets
		if self:HasMultipleTrinkets(rewards) then
			self:Debug('Multiple trinkets -- Manual selection required!', 2)
			self:Output('Multiple trinkets -- Manual selection required!')
			return;
		end
		-- Single-trinket
		if self:HasSingleTrinket(rewards) then
			self:Debug('Trinket selection.', 2)	
			for i,v in pairs(rewards) do if v.isTrinket then self:SelectQuestReward(v, 'singletrinket') end end
			return;
		end
		rewards = self:SortTableByKey(rewards, 'rating'); -- Sort by rating
		-- Check for highest rated equippable
		for i,v in pairs(rewards) do
			if v.rating and v.rating >= self:GetOptionValue('rewardAutomation', 'percentUpgradeThreshold') and v.equippable and (not v.replacesHeirloom) and (not v.replacesExpHeirloom) then
				-- Select item
				self:SelectQuestReward(v, 'normal');
				return;
			end
		end
		rewards = self:SortTableByKey(rewards, 'value'); -- Sort by value
		-- Check for highest vendor value
		for i,v in pairs(rewards) do
			if v.value then
				self:SelectQuestReward(v, 'value');
				-- Check if auto-sell list
				if self:GetOptionValue('merchant', 'autoSellHighValue') then
					self.db.profile.itemsToBeSold[v.ID] = true
				end
				return;
			end
		end
	end
end

function kAutoQuest:SortTableByKey(data, key)
	if (not data) or (not type(data) == 'table') then return end
	self:Debug('Sorting table', 3)
	table.sort(data, function(a,b) 
		if (a[key] and b[key] and a[key] > b[key]) or (a[key] and not b[key]) then
			return true
		elseif (a[key] and b[key] and a[key] < b[key]) or (b[key] and not a[key]) then
			return false
		end
		return false
	end);
	return data;
end

function kAutoQuest:SelectQuestReward(reward, category)
	if (not type(reward) == 'table') or (not reward.index) then return end
	category = category or 'normal';
	local choiceString = '';
	if category == 'normal' then
		choiceString = ('Best equippable item with upgrade rating of %s.'):format(self:ColorizeText(self:Round(reward.rating*100, 1), 0, 210, 0)..'%')
	elseif category == 'whitelist' then
		choiceString = ('%s item.'):format(self:ColorizeText('Whitelisted', 255, 255, 255))
	elseif category == 'singletrinket' then
		choiceString = ('Trinket selected due to %s option.'):format(self:ColorizeText('[Always Select Trinket]', 0, 100, 150))
	elseif category == 'value' then
		choiceString = ('Highest vendor value item worth %s.'):format(GetCoinTextureString(reward.value))
	end
	self:Debug('Select reward' .. reward.link, 2)
	if not self:GetOptionValue('debug', 'enabled') then GetQuestReward(reward.index) end
	self:Output(('%s %s %s'):format(self:ColorizeText('Auto-Selection:', 240, 120, 0), reward.link, choiceString))
	self:ProcessAutoEquip(reward)
end

function kAutoQuest:ProcessAutoEquip(reward, category)
	if category and category == 'value' then return end
	if self:GetOptionValue('rewardAutomation', 'equipUpgrades') then
		if reward.equippable and (not reward.replacesHeirloom) and (not reward.replacesExpHeirloom) then
			local slot = self:GetExistingItemSlot(reward);
			if type(slot) == 'table' then slot = slot[1] end
			if self:IsPerfectWeaponUpgrade(reward) then -- Perfect upgrade and weapon/offhand slot, don't auto-equip
				self:Debug(('%s weapon/offhand upgrade detected, unable to auto-equip %s.'):format('100%',reward.link), 3)		
				self:Output(('%s weapon/offhand upgrade detected, unable to auto-equip %s. Please manually review item as possible upgrade.'):format('100%',reward.link))	
				return				
			end
			self.TIMERS[reward.ID] = {timer = kAutoQuest:ScheduleRepeatingTimer('EquipItem', 5, {reward.ID, slot}), id = reward.ID};
		end
	end		
end

function kAutoQuest:IsPerfectWeaponUpgrade(reward)
	local slot = self:GetExistingItemSlot(reward);
	if type(slot) == 'table' then slot = slot[1] end
	if (slot == 16 or slot == 17) and reward.rating == 1 then
		return true
	end
	return false
end

function kAutoQuest:GetExistingItemSlot(reward)
	if reward.currentItemID then return self:GetSlotOfEquippedItem(reward.currentItemID) else return reward.slot end
end

function kAutoQuest:GetSlotOfEquippedItem(ID)
	if not ID then return end
	for i=0,19 do
		if ID == GetInventoryItemID('player', i) then return i end
	end
	return;
end

function kAutoQuest:HasMultipleTrinkets(data)
	if not self:GetOptionValue('rewardAutomation', 'defaultSelectTrinket') then return false end
	if self:KeyValueCount(data, 'isTrinket', true) >= 2 then return true else return false end
end

function kAutoQuest:HasSingleTrinket(data)
	if not self:GetOptionValue('rewardAutomation', 'defaultSelectTrinket') then return false end
	if self:KeyValueCount(data, 'isTrinket', true) == 1 then return true else return false end
end

function kAutoQuest:GetItemRating(item)
	if not self:IsItemEquippable(item) then return 0 end
	local percentUpgrade = self:GetPawnPercentUpgrade(item);
	return percentUpgrade;
end

function kAutoQuest:DoesItemReplaceHeirloom(item)
	if not self:GetOptionValue('rewardAutomation', 'retainHeirlooms') then return false end
	-- Get inventory slot
	local slot = self:GetItemEquipSlot(item)
	local slots = type(slot) == 'table' and slot or {slot};
	for i,v in pairs(slots) do
		local isHeirloom = false
		local itemID = GetInventoryItemID('player', v)
		-- Check that current item isn't heirloom
		local rarity = itemID and select(3, GetItemInfo(itemID));
		local heirloom = itemID and PawnGetItemData(('item:%s'):format(itemID))
		if heirloom and rarity == 7 then
			local heirMaxLevel = PawnGetMaxLevelItemIsUsefulHeirloom(heirloom);
			if heirMaxLevel then
				-- Heirloom found
				if ((UnitLevel('player') + self.db.profile.rewardAutomation.heirloomIgnoreLevels) <= heirMaxLevel) then
					isHeirloom = true;
				end
			end
		end
		if not isHeirloom then return false end
	end
	return true;
end

function kAutoQuest:DoesItemReplaceExpHeirloom(item)
	-- Get inventory slot
	local slot = self:GetItemEquipSlot(item)
	local slots = type(slot) == 'table' and slot or {slot};
	for i,v in pairs(slots) do
		local isHeirloom = false
		local itemID = GetInventoryItemID('player', v)
		-- Check that current item isn't heirloom
		local rarity = itemID and select(3, GetItemInfo(itemID));
		local heirloom = itemID and PawnGetItemData(('item:%s'):format(itemID))
		if heirloom and rarity == 7 then
			local heirMaxLevel = PawnGetMaxLevelItemIsUsefulHeirloom(heirloom);
			if heirMaxLevel then
				-- Heirloom found
				if (tContains(HEIRLOOM_EXP_SLOTS, v) and UnitLevel('player') <= heirMaxLevel) then
					isHeirloom = true;
				end
			end
		end
		if not isHeirloom then return false end
	end
	return true;
end

function kAutoQuest:GetPawnPercentUpgrade(itemID)
	local results = PawnIsItemIDAnUpgrade(itemID);
	-- Check for selected scale
	if results and #results > 0 then
		for iResult,vResult in pairs(results) do
			if vResult.ScaleName == self.db.profile.rewardAutomation.pawnScaleSelected then
				return vResult.PercentUpgrade
			end
		end
	end
end

function kAutoQuest:GetPawnCurrentItem(itemID)
	local results = PawnIsItemIDAnUpgrade(itemID);
	-- Check for selected scale
	if results and #results > 0 then
		for iResult,vResult in pairs(results) do
			if vResult.ScaleName == self.db.profile.rewardAutomation.pawnScaleSelected then
				return vResult.ExistingItemID
			end
		end
	end
end

function kAutoQuest:GetOptionValue(primary, secondary)
	if primary and secondary then
		return self.db.profile[primary][secondary];
	elseif primary then
		return self.db.profile[primary];
	end
end

function kAutoQuest:IsValidCharacterLevel()
	if not self:GetOptionValue('rewardAutomation', 'enabled') then return false end
	local playerLevel = UnitLevel("player")
	if self:GetOptionValue('rewardAutomation', 'minLevel') > playerLevel then return false end
	if self:GetOptionValue('rewardAutomation', 'maxLevel') < playerLevel then return false end	
	return true
end

function kAutoQuest:IsItemTrinket(item)
	local slot = self:GetItemEquipSlot(item)
	local slots = type(slot) == 'table' and slot or {slot};
	for i,v in pairs(slots) do
		if v == 13 or v == 14 then return true end
	end
	return false
end

function kAutoQuest:GetItemVendorValue(item)
	local itemSellPrice = select(11, GetItemInfo(item))
	return itemSellPrice
end

function kAutoQuest:QUEST_COMPLETE(event)
	self:ProcessQuestCompletion()
end

function kAutoQuest:QUEST_COMPLETE_OLD(event)
	if not self:CanAutomate() then return end	
	local numItems = GetNumQuestChoices();
	-- Check numItems
	if numItems and numItems > 0 then
		-- Check if enabled
		if not kAutoQuest.db.profile.rewardAutomation.enabled then return end
		-- Player level
		local playerLevel = UnitLevel("player")
		if kAutoQuest.db.profile.rewardAutomation.minLevel > playerLevel then return end
		if kAutoQuest.db.profile.rewardAutomation.maxLevel < playerLevel then return end	
		if not kAutoQuest:IsPawnLoaded() then return end
		local choiceIndex, percent, existingID, type = kAutoQuest:GetBestReward();	
		if not choiceIndex then 
			kAutoQuest:Debug('No valid auto-selectable rewards found, manual selection required.', 3)
			kAutoQuest:Output('No valid auto-selectable rewards found, manual selection required.')
			return
		end
		if type then
			if type == 'multitrinket' then
				kAutoQuest:Debug('Multiple trinkets -- Manual selection required!', 2)
				kAutoQuest:Output('Multiple trinkets -- Manual selection required!')
				return
			end
		end
		local itemlink = GetQuestItemLink('choice', choiceIndex);
		local itemID = kAutoQuest:GetItemIdFromItemLink(itemlink)
		kAutoQuest:Debug(('Selecting choiceIndex (%s) item (%s)'):format(choiceIndex or "", itemlink or ""), 2);		
		-- Check if auto-equip
		if kAutoQuest.db.profile.rewardAutomation.equipUpgrades then
			if itemID then
				local slotID = kAutoQuest:GetItemEquipSlot(itemID)
				kAutoQuest:Debug(('Auto-equipping slotID %s'):format(slotID or ""), 3)
				if slotID then
					if (slotID == 16 or slotID == 17) and percent == 100 then -- Perfect upgrade and weapon/offhand slot, don't auto-equip
						kAutoQuest:Debug(('%s upgrade detected, unable to auto-equip %s.'):format('100%',itemlink), 3)		
						kAutoQuest:Output(('%s upgrade detected, unable to auto-equip %s. Please manually review item as possible upgrade.'):format('100%',itemlink))						
					else
						if kAutoQuest.db.profile.debug.enabled then return end
						-- Create repeating timer to attempt to equip item
						self.TIMERS[itemID] = {timer = kAutoQuest:ScheduleRepeatingTimer('EquipItem', 5, {itemID, slotID}), id = itemID};
					end
				end
			end
		end		
		if kAutoQuest.db.profile.debug.enabled then return end
		-- Check if vendor item
		if type and type == 'vendor' and kAutoQuest.db.profile.merchant.autoSellHighValue then
			kAutoQuest:Debug(('Adding item to sell list: %s'):format(itemlink or ""), 2);
			kAutoQuest.db.profile.itemsToBeSold[itemID] = true
		end
		if type and type == 'whitelist' then
			kAutoQuest:Output(('Auto-selecting whitelist item: %s'):format(itemlink or ""))
		end
		-- Make selection
		GetQuestReward(choiceIndex)
	else
		-- Make selection
		GetQuestReward(1)
	end
end

function kAutoQuest:GetBestReward()
	local numItems = GetNumQuestChoices();
	local currentChoiceIndex = 1;
	local bestUpgradePercent = 0;
	local bestVendorValue = 0;
	local bestVendorValueID;
	local returnItemID, existingItemID;
	local upgradeCount = 0;
	local className = select(2, UnitClass('player'));
	local bestArmorType = BEST_ARMOR_TYPES[className];
	local trinkets;
	-- check if table (pre-40 diff armor type)
	if type(bestArmorType) == 'table' then
		-- Check if level < 40
		if UnitLevel('player') < 40 then bestArmorType = bestArmorType[2] else bestArmorType = bestArmorType[1] end
	end	
	kAutoQuest:Debug('NUMITEMS: ' .. numItems)
	if numItems and numItems > 0 then
		for iRewardID=1, numItems do
			kAutoQuest:Debug(('Checking ID: %s'):format(iRewardID), 3);
			local itemlink = GetQuestItemLink('choice', iRewardID);
			local rewardID = kAutoQuest:GetItemIdFromItemLink(itemlink)
			local rewardName = GetItemInfo(rewardID)
			if kAutoQuest:DoesWhitelistItemExist(rewardID) or kAutoQuest:DoesWhitelistItemExist(rewardName) then return iRewardID, _, _, 'whitelist' end -- Whitelist match
			if rewardID then kAutoQuest:Debug(('rewardID checking: %s, itemlink: %s'):format(rewardID, itemlink), 3) end
			-- Check if equippable and valid
			if rewardID and IsEquippableItem(rewardID) then
				local _, _, _, itemLevel, _, itemType, itemSubType, _, itemEquipLoc, _, itemSellPrice = GetItemInfo(rewardID)
				local slotID = kAutoQuest:GetItemEquipSlot(rewardID)
				-- Check if trinket slot
				if slotID == 13 or slotID == 14 then
					kAutoQuest:Debug('trinket found', 3)
					if not trinkets then trinkets = {} end
					if not trinkets[rewardID] then 
						kAutoQuest:Debug('setting up trinket table', 3);
						trinkets[rewardID] = {} 
						trinkets[rewardID].index = iRewardID
					end
				end				
				-- Check vendor value
				if itemSellPrice > bestVendorValue then 
					kAutoQuest:Debug(('sell price curr: %s, bestVendorValue: %s, item: %s'):format(itemSellPrice, bestVendorValue, itemlink), 3);
					bestVendorValue = itemSellPrice;
					bestVendorValueID = iRewardID;
				end
				-- Check if rarity = 7, heirloom
				-- Compare item
				local results = PawnIsItemIDAnUpgrade(rewardID);
				-- Check for selected scale
				if results and #results > 0 then
					for iResult,vResult in pairs(results) do
						local existingSlotID;
						if vResult.ExistingItemID then existingSlotID = kAutoQuest:GetItemEquipSlot(vResult.ExistingItemID) else existingSlotID = slotID end
						kAutoQuest:Debug('selected scale: ' .. vResult.ScaleName)
						if vResult.ScaleName == kAutoQuest.db.profile.rewardAutomation.pawnScaleSelected then
							kAutoQuest:Debug('percent upgrade : ' .. vResult.PercentUpgrade)
							-- Check if percent threshold match
							if vResult.PercentUpgrade >= kAutoQuest.db.profile.rewardAutomation.percentUpgradeThreshold then
								kAutoQuest:Debug(('Upgrade threshold met: %s'):format(itemlink), 3)
								-- Upgrade match found, check if greater upgrade than prior match
								if vResult.PercentUpgrade > bestUpgradePercent then 
									-- Check that current item isn't heirloom
									local existingRarity = vResult.ExistingItemID and select(3, GetItemInfo(vResult.ExistingItemID));
									local isHeirloomToIgnore = false
									local heirloomItem = vResult.ExistingItemID and PawnGetItemData(('item:%s'):format(vResult.ExistingItemID))
									if heirloomItem then
										local heirMaxLevel = PawnGetMaxLevelItemIsUsefulHeirloom(heirloomItem);
										if heirMaxLevel then
											if tContains(HEIRLOOM_EXP_SLOTS, existingSlotID) and UnitLevel('player') <= heirMaxLevel then
												isHeirloomToIgnore = true;
											elseif (UnitLevel('player') + kAutoQuest.db.profile.rewardAutomation.heirloomIgnoreLevels) <= heirMaxLevel then
												isHeirloomToIgnore = true;
											end
										end
									end
									if not (existingRarity == 7 and kAutoQuest.db.profile.rewardAutomation.retainHeirlooms and isHeirloomToIgnore) then 
										kAutoQuest:Debug(('Not heirloom match %s'):format(itemlink), 3)
										-- Check for armor and armor type match if required
										if itemType == 'Armor' and tContains(ARMOR_TYPE_SLOTS, existingSlotID) and kAutoQuest.db.profile.rewardAutomation.bestArmorType then
											if bestArmorType == itemSubType then
												bestUpgradePercent = vResult.PercentUpgrade -- Set new highest percent
												currentChoiceIndex = iRewardID; -- set new reward ID selection			
												returnItemID = rewardID;
												existingItemID = vResult.ExistingItemID;
												upgradeCount = upgradeCount + 1;
												-- Check if trinket
												if trinkets and trinkets[rewardID] then 
													trinkets[rewardID].upgradePercent = vResult.PercentUpgrade
													trinkets[rewardID].existingItemID = vResult.ExistingItemID
													trinkets[rewardID].returnItemID = rewardID														
												end
											end
										else
											bestUpgradePercent = vResult.PercentUpgrade -- Set new highest percent
											currentChoiceIndex = iRewardID; -- set new reward ID selection		
											returnItemID = rewardID;				
											existingItemID = vResult.ExistingItemID;
											upgradeCount = upgradeCount + 1;
											-- Check if trinket
											if trinkets and trinkets[rewardID] then 
												trinkets[rewardID].upgradePercent = vResult.PercentUpgrade
												trinkets[rewardID].existingItemID = vResult.ExistingItemID
												trinkets[rewardID].returnItemID = rewardID
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	-- Check if trinket select
	if kAutoQuest.db.profile.rewardAutomation.defaultSelectTrinket then
	   -- Check if trinkets exist
	   if trinkets and not (next(trinkets) == nil) then
		  local trinketIndex;
		  local highestPercent = 0;
		  local trinketCount = 0;
		  for i,v in pairs(trinkets) do
			trinketCount = trinketCount + 1;
			 if (v.upgradePercent and v.upgradePercent >= highestPercent) or (not v.upgradePercent) then
				kAutoQuest:Debug(('set trinket index ID to %s'):format(i), 3)
				trinketIndex = i;
			 end
		  end
		  -- Check if count is > 1, then don't auto-select
		  if trinketCount > 1 then
			return _,_,_,'multitrinket'
		  else
			  for i,v in pairs(trinkets) do
				 if i == trinketIndex then
					kAutoQuest:Debug(('Forcing trinket selection: %s'):format(select(2, GetItemInfo(trinketIndex))), 2);
					kAutoQuest:Output(('Forcing trinket selection: %s'):format(select(2, GetItemInfo(trinketIndex))))
					return v.index, 0, (v.existingItemID or nil)
				 end
			  end		  
		  end
	   end
	end
	-- Check if no upgrades found, return best vendor price item
	if upgradeCount == 0 then 
		if bestVendorValueID then
			kAutoQuest:Debug(('Selecting high-vendor value: %s, ID: %s'):format(GetCoinTextureString(bestVendorValue), bestVendorValueID), 2)
			local questItemlink = GetQuestItemLink('choice', bestVendorValueID)
			if questItemlink then
				kAutoQuest:Output(('Selecting high-vendor value: %s, item: %s'):format(GetCoinTextureString(bestVendorValue), questItemlink))
			end
			return bestVendorValueID, _, _, 'vendor'			
		end
	else
		kAutoQuest:Output(('Auto-selection item: %s'):format(GetQuestItemLink('choice', currentChoiceIndex)));
		return currentChoiceIndex, bestUpgradePercent, existingItemID;	
	end	
end

function kAutoQuest.onevent(self, event, ...)
	if self[event] then
		self[event](self, ...)
	end
end

function kAutoQuest:GetItemEquipSlot(item, returnType)
	local _
	-- Check item
	if (type(item) == "string") or (type(item) == "number") then -- common case first
	elseif type(item) == "table" and type(item.GetItem) == "function" then
		-- Get the link
		_, item = item:GetItem()
		if type(item) ~= "string" then return end
	else
		return
	end
	-- Check if item is in local cache
	local name, _, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(item);
	if not name then return end
	for i,loc in pairs(ITEM_EQUIP_LOCS) do
		if loc.name == itemEquipLoc then
			if returnType then
				return loc[returnType];
			else
				return loc.slotNumber;
			end
		end
	end
	return nil;
end

function kAutoQuest:AddWhitelistItem(item)
	if not self:ValidateWhitelistItem(item) then return end
	if self:DoesWhitelistItemExist(item) then 
		self:Debug(('Whitelist item %s already exists.'):format(item), 3)
		self:Output(('Whitelist item %salready exists.'):format(item))
		return
	end
	local name, link = GetItemInfo(item)
	if name then
		local id = self:GetItemIdFromItemLink(link)
		self:Debug(('Adding whitelist item name %s id %s'):format(name, id), 3)
		tinsert(self.db.profile.whitelist, {id = tonumber(id), name = name})
	elseif tonumber(item) ~= nil then
		self:Debug(('Adding whitelist item id %s'):format(item), 3)
		tinsert(self.db.profile.whitelist, {id = tonumber(id)})
	elseif type(item) == 'string' and item ~= "" then
		self:Debug(('Adding whitelist item name %s'):format(item), 3)
		tinsert(self.db.profile.whitelist, {name = item})
	end
end

function kAutoQuest:DeleteWhitelistItem(index)
	if self.db.profile.whitelist[index] then tremove(self.db.profile.whitelist, index) end
end

function kAutoQuest:DoesWhitelistItemExist(item)
	local name, id = type(item) == 'string' and item, item and tonumber(item);
	for i,v in pairs(self.db.profile.whitelist) do
		if id and tonumber(v.id) == id then return i end
		if name and v.name == name then return i end
	end
end

function kAutoQuest:GetSelectedWhitelistItemLabel()
	local index = self.whitelistSelection or 1;
	if tonumber(#kAutoQuest.db.profile.whitelist) ~= 0 then
		local id, name = self.db.profile.whitelist[index].id, self.db.profile.whitelist[index].name
		if id and name then
			return ('%s [%s]'):format(name, id)
		elseif id then
			return ('%s'):format(id)
		elseif name then
			return ('%s'):format(name)
		end
	end
end

function kAutoQuest:GetWhitelistValues()
	local scales;
	local out = {};
	for i,v in pairs(self.db.profile.whitelist) do
		out[i] = v.id and v.name and ('%s [%s]'):format(v.name, v.id) or v.id and v.id or v.name and v.name
	end
	return out;	
end

function kAutoQuest:ValidateWhitelistItem(item)
	if not item then return false end
	if 	GetItemInfo(item) or 
		tonumber(item) ~= nil or 
		(type(item) == 'string' and item ~= "") then return true end
end

function kAutoQuest:Debug(value, threshold, label)
	local isDevLoaded = IsAddOnLoaded('_Dev');
	local prefix = label and 'kAutoQuest ' .. label .. ': ' or 'kAutoQuest: ';
	-- CHECK IF _DEV exists
	if self.db.profile.debug.enabled then
		if not threshold or threshold <= self.db.profile.debug.threshold then
			if isDevLoaded then
				dump(prefix, value);
			else
				if type(value) == 'table' then print(prefix,value) else
					self:Print(ChatFrame1, ('%s%s'):format(prefix,value))			
				end
			end
		end
	end
end

function kAutoQuest:ColorizeText(text, r, g, b)
	return ('%s%s%s'):format(self:RGBToHex(r,g,b), text, '|r');
end

function kAutoQuest:RGBToHex(r, g, b, suppressPrefix)
	r = r <= 255 and r >= 0 and r or 0
	g = g <= 255 and g >= 0 and g or 0
	b = b <= 255 and b >= 0 and b or 0
	if suppressAlpha then
		return string.format("%02x%02x%02x", r, g, b)
	else
		return string.format("|cff%02x%02x%02x", r, g, b)	
	end
end

function kAutoQuest:Output(msg)
	if not self.db.profile.rewardAutomation.suppressOutput then
		print(('%s %s'):format(self:ColorizeText('kAutoQuest',0,200,0), self:ColorizeText(msg,255,255,255)));
	end
end

function kAutoQuest:KeyValueCount(data, key, value)
	if not data then return end
	local count = 0;
	for i,v in pairs(data) do if data[key] == value then count = count + 1 end end
	return count;
end

function kAutoQuest:Round(num, idp)
   local mult = 10^(idp or 0)
   return math.floor(num * mult + 0.5) / mult
end

function kAutoQuest:DoTablesMatch(table1,table2)
	for i1,v1 in pairs(table1) do
		if not (table1[i1] == table2[i1]) then return false end
	end
	for i2,v2 in pairs(table2) do
		if not (table2[i2] == table1[i2]) then return false end
	end
	return true
end

function kAutoQuest:IsItemEquippable(item)
	local _,link = GetItemInfo(item)
	if not link then return false end
	if not IsEquippableItem(item) then return false end
	local tip = kAutoQuestTooltip or CreateFrame('GameTooltip', 'kAutoQuestTooltip', WorldFrame, 'GameTooltipTemplate')
	if not tip then return false end
	tip:SetOwner(WorldFrame, 'ANCHOR_NONE')
	self:ResetTooltip(tip)
	tip:SetHyperlink(link)
	local tipName = tip:GetName();
	for i=1,tip:NumLines() do
		local lineLeft = _G[('%s%s%s'):format(tipName,'TextLeft',i)]
		local lineRight = _G[('%s%s%s'):format(tipName,'TextRight',i)]
		if lineLeft and lineLeft:GetText() then
			local r,g,b,a = lineLeft:GetTextColor();
			local color = {r=self:Round(r,4),g=self:Round(g,4),b=self:Round(b,4),a=self:Round(a,4)}
			if self:DoTablesMatch(color, TOOLTIP_COLOR_RED) then self:Debug({'Red color', {r,g,b,a}, GetItemInfo(item), lineLeft:GetText(), lineLeft}, 3) return false end
		end
		if lineRight and lineRight:GetText() then
			local r,g,b,a = lineRight:GetTextColor();
			local color = {r=self:Round(r,4),g=self:Round(g,4),b=self:Round(b,4),a=self:Round(a,4)}			
			if self:DoTablesMatch(color, TOOLTIP_COLOR_RED) then self:Debug({'Red color', {r,g,b,a}, GetItemInfo(item), lineRight:GetText(), lineRight}, 3) return false	end
		end
	end
	return true
end

function kAutoQuest:ResetTooltip(tip)
	tip:ClearLines()
	for i=1,tip:NumLines() do
		local lineLeft = _G[('%s%s%s'):format(tipName,'TextLeft',i)]
		local lineRight = _G[('%s%s%s'):format(tipName,'TextRight',i)]
		if lineRight then
			lineRight:Hide()
			lineRight:SetText(nil)
			lineRight:SetTextColor(1,1,1)
		end
		if lineLeft then
			lineRight:SetTextColor(1,1,1)
		end
	end
end

kAutoQuest.options = {
    name = "kAutoQuest",
    handler = kAutoQuest,
    type = 'group',
    args = {
		debug = {
			name = 'Debug',
			type = 'group',
			args = {
				enabled = {
					name = 'Enabled',
					type = 'toggle',
					desc = 'Toggle Debug mode',
					set = function(info,value) kAutoQuest.db.profile.debug.enabled = value end,
					get = function(info) return kAutoQuest.db.profile.debug.enabled end,
				},
				threshold = {
					name = 'Threshold',
					desc = 'Description for Debug Threshold',
					type = 'select',
					values = {
						[1] = 'Low',
						[2] = 'Normal',
						[3] = 'High',
					},
					style = 'dropdown',
					set = function(info,value) kAutoQuest.db.profile.debug.threshold = value end,
					get = function(info) return kAutoQuest.db.profile.debug.threshold end,
				},
			},
			cmdHidden = true,
		},
	},
};

kAutoQuest.merchant = {
	name = 'Merchant Settings',
	type = 'group',
	args = {
		autoselljunk = {
			name = 'Sell Junk',
			type = 'toggle',
			desc = 'Toggle auto-selling of junk items when visiting a merchant.',
			set = function(info,value) kAutoQuest.db.profile.merchant.autoSellJunk = value end,
			get = function(info) return kAutoQuest.db.profile.merchant.autoSellJunk end,
			width = 'full',
			order = 3,
		},
		autosellvendorrewards = {
			name = 'Sell High Vendor Value Rewards',
			type = 'toggle',
			desc = 'Toggle auto-selling of items auto-selected by kAutoQuest for high vendor value (and therefore not upgrades to the current spec).',
			set = function(info,value) kAutoQuest.db.profile.merchant.autoSellHighValue = value end,
			get = function(info) return kAutoQuest.db.profile.merchant.autoSellHighValue end,
			disabled = function() if not kAutoQuest.db.profile.rewardAutomation.enabled then return true else return false end end,	
			width = 'full',			
			order = 6,
		},
	},
};

kAutoQuest.questRewardAutomation = {
	name = 'Quest Reward Automation',
	type = 'group',
	args = {
		errorheader = {
			name = 'WARNING: The Pawn addon is required to utilize Reward Automation.  Please install and/or enable Pawn.',
			type = 'description',
			hidden = function() return kAutoQuest:IsPawnLoaded() end,
			width = 'full',
			fontSize = 'large',
			order = 1,
		},
		enabled = {
			name = 'Enable Auto-Selection',
			type = 'toggle',
			desc = 'Toggle quest reward automated selection process.',
			set = function(info,value) kAutoQuest.db.profile.rewardAutomation.enabled = value end,
			get = function(info) 
				if not kAutoQuest:IsPawnLoaded() then
					return false
				end
				return kAutoQuest.db.profile.rewardAutomation.enabled
			end,
			disabled = function()
				return not kAutoQuest:IsPawnLoaded()
			end,
			order = 2,
		},
		suppressoutput = {
			name = 'Suppress Output',
			type = 'toggle',
			desc = 'Toggle message indication of common events from kAutoQuest.',
			set = function(info,value) kAutoQuest.db.profile.rewardAutomation.suppressOutput = value end,
			get = function(info) return kAutoQuest.db.profile.rewardAutomation.suppressOutput end,
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest:IsPawnLoaded() then return true else return false end 
			end,			
			order = 4,			
		},			
		selectdropdown = {
			name = 'Select Active Scale',
			type = 'select',
			desc = 'Pawn Scale to use when determining whether quest reward items are upgrades',
			values = function() return kAutoQuest:GetScaleListValues() end,
			set = function(info,value) kAutoQuest.db.profile.rewardAutomation.pawnScaleSelected = value end,
			get = function(info) return kAutoQuest.db.profile.rewardAutomation.pawnScaleSelected end,
			width = 'double',
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest:IsPawnLoaded() then return true else return false end
			end,			
			order = 5,
		},
		percentupgradethreshold = {
			name = 'Upgrade Percentage Threshold',
			type = 'range',
			desc = 'Percentage upgrade as determined by Pawn an item must meet or exceed in order to be auto-selected.',
			min = 0.01,
			max = 3,
			set = function(info,value) kAutoQuest.db.profile.rewardAutomation.percentUpgradeThreshold = value end,
			get = function(info) return kAutoQuest.db.profile.rewardAutomation.percentUpgradeThreshold end,
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest:IsPawnLoaded() then return true	else return false end
			end,
			isPercent = true,
			order = 6,
		},		
		defaulttrinketselect = {
			name = 'Always Select Trinket',
			type = 'toggle',
			desc = ('%s\n\n%s'):format('Given the difficulty of determining upgrade values of trinkets, enabling this option always forces kAutoQuest to select a trinket if available as a reward.', kAutoQuest:ColorizeText('If more than one trinket is available, kAutoQuest will request a user decision instead.', 145, 145, 0)),
			set = function(info,value) kAutoQuest.db.profile.rewardAutomation.defaultSelectTrinket = value end,
			get = function(info) return kAutoQuest.db.profile.rewardAutomation.defaultSelectTrinket end,
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest:IsPawnLoaded() then	return true	else return false end
			end,			
			order = 7,
		},		
		autoequipsettings = {
			name = 'Auto-Equip Settings',
			type = 'header',
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest:IsPawnLoaded() then	return true else return false end
			end,
			order = 8,
		},		
		autoequipupgrades = {
			name = 'Enable Auto-Equip',
			type = 'toggle',
			desc = 'Automatically equip upgrades received from quest rewards if the item beats your current item in the matching slot for the selected Pawn Scale.',
			set = function(info,value) kAutoQuest.db.profile.rewardAutomation.equipUpgrades = value end,
			get = function(info) return kAutoQuest.db.profile.rewardAutomation.equipUpgrades end,
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest:IsPawnLoaded() then	return true	else return false end
			end,			
			order = 9,
		},	
		retainheirlooms = {
			name = 'Retain Heirlooms',
			type = 'toggle',
			desc = ('%s\n\n%s'):format('Determines if Heirloom items will remain equipped even if a better upgrade is found.', kAutoQuest:ColorizeText('Heirlooms that grant exp bonus will never be replaced until the character has surpassed their max growth level, regardless of this option.', 255, 0, 0)),
			set = function(info,value) kAutoQuest.db.profile.rewardAutomation.retainHeirlooms = value end,
			get = function(info) return kAutoQuest.db.profile.rewardAutomation.retainHeirlooms end,
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest:IsPawnLoaded() or not kAutoQuest.db.profile.rewardAutomation.equipUpgrades then	return true	else return false end
			end,			
			order = 10,			
		},	
		heirloomignorelevels = {
			name = 'Heirloom Ignore Threshold',
			type = 'range',
			desc = ('%s\n\n%s'):format('Determines how many levels your character must be within the maximum heirloom growth level to ignore the Retain Heirlooms setting and instead select a viable upgrade for that heirloom-equipped slot.  (e.g. If value of "2" and item has a max heirloom growth level of 80, if character is 79+, possible upgrades will be selected from rewards).', kAutoQuest:ColorizeText('Heirlooms that grant exp bonus will never be replaced until the character has surpassed their max growth level, regardless of this option.', 145, 145, 0)),
			min = 0,
			max = 90,		
			step = 1,
			set = function(info,value) kAutoQuest.db.profile.rewardAutomation.heirloomIgnoreLevels = value end,
			get = function(info) return kAutoQuest.db.profile.rewardAutomation.heirloomIgnoreLevels end,
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest.db.profile.rewardAutomation.retainHeirlooms or not kAutoQuest:IsPawnLoaded() or not kAutoQuest.db.profile.rewardAutomation.equipUpgrades then return true else return false end
			end,			
			order = 11,			
		},				
		levelsettings = {
			name = 'Character Level Settings',
			type = 'header',
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest:IsPawnLoaded() then	return true	else return false end
			end,
			order = 13,
		},
		minimumlevel = {
			name = 'Minimum Level',
			type = 'range',
			desc = 'Minimum character level at which to automate quest reward selection.',
			min = 1,
			max = 90,
			set = function(info,value) kAutoQuest.db.profile.rewardAutomation.minLevel = value end,
			get = function(info) return kAutoQuest.db.profile.rewardAutomation.minLevel end,
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest:IsPawnLoaded() then	return true	else return false end
			end,
			order = 14,
		},
		maximumlevel = {
			name = 'Maximum Level',
			type = 'range',
			desc = 'Maximum character level at which to automate quest reward selection.',
			min = 1,
			max = 90,
			set = function(info,value) kAutoQuest.db.profile.rewardAutomation.maxLevel = value end,
			get = function(info) return kAutoQuest.db.profile.rewardAutomation.maxLevel end,
			disabled = function()
				if not kAutoQuest.db.profile.rewardAutomation.enabled or not kAutoQuest:IsPawnLoaded() then	return true	else return false end
			end,
			order = 15,
		},				
	},
};

kAutoQuest.whitelist = {
	name = 'Whitelist Items',
	type = 'group',
	args = {
		add = {
			name = 'Add Whitelist Item',
			type = 'input',
			desc = 'Add a new item to the whitelist, which will be automatically selected when available as a quest reward.',
			set = function(info,value)
				kAutoQuest:AddWhitelistItem(value)
			end,	
			validate = function(info,value) return kAutoQuest:ValidateWhitelistItem(value) end,
			usage = '<ItemName or ItemID>',
			width = 'full',
			order = 5,
		},		
		items = {
			name = 'Whitelist Items',
			type = 'select',
			desc = 'Current whitelisted items.',
			values = function() return kAutoQuest:GetWhitelistValues() end,
			set = function(info,value) kAutoQuest.whitelistSelection = value end,
			get = function(info)
				if tonumber(#kAutoQuest.db.profile.whitelist) ~= 0 and #kAutoQuest.db.profile.whitelist < (kAutoQuest.whitelistSelection or 1) then kAutoQuest.whitelistSelection = #kAutoQuest.db.profile.whitelist end
				if not #kAutoQuest.db.profile.whitelist then kAutoQuest.whitelistSelection = 1 end
				return kAutoQuest.whitelistSelection or 1
			end,
			width = 'double',			
			order = 10,
		},
		delete = {
			name = 'Delete',
			type = 'execute',
			desc = function(info,value) 
				if #kAutoQuest.db.profile.whitelist > 0 then
					return ('Delete %s from the whitelist?'):format(kAutoQuest:GetSelectedWhitelistItemLabel())
				else
					return 'Delete selected item from the whitelist.'
				end
			end,
			disabled = function()
				return not kAutoQuest:GetSelectedWhitelistItemLabel()
			end,
			func = function()
				kAutoQuest:DeleteWhitelistItem(kAutoQuest.whitelistSelection or 1)
			end,
			order = 15,
		},
	},
};

_G.kAutoQuest = kAutoQuest

