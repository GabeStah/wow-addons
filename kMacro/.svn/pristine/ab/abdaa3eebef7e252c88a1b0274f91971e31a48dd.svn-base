-- Create Mixins
local _G = _G
local _
local kMacro = LibStub("AceAddon-3.0"):NewAddon("kMacro", "AceComm-3.0", "AceConsole-3.0", "AceEvent-3.0", "AceHook-3.0", "AceSerializer-3.0", "AceTimer-3.0")
_G.kMacro = kMacro
kMacro.gui = {};
kMacro.gui.frames = {};
function kMacro:OnEnable() end
function kMacro:OnDisable() end
function kMacro:OnInitialize()
    -- Load Database
    self.db = LibStub("AceDB-3.0"):New("kMacroDB", self.defaults)
    -- Inject Options Table and Slash Commands
	-- Create options	
	self.options.args.profile = LibStub("AceDBOptions-3.0"):GetOptionsTable(self.db)
	self.config = LibStub("AceConfig-3.0"):RegisterOptionsTable("kMacro", self.options, {"kmacro", "kmac"})
	self.dialog = LibStub("AceConfigDialog-3.0")
	self.AceGUI = LibStub("AceGUI-3.0")
	-- Init Events
	self:InitializeEvents()
	self.updateFrame = CreateFrame("Frame", "kMacroUpdateFrame", UIParent);
	kMacroUpdateFrame:SetScript("OnUpdate", function(frame,elapsed) kMacro:OnUpdate(1, elapsed) end)
end

function kMacro:InitializeEvents()
	kMacro:RegisterEvent('PLAYER_ENTERING_WORLD')
	kMacro:RegisterEvent('PLAYER_SPECIALIZATION_CHANGED')
	kMacro:RegisterEvent('ZONE_CHANGED')
	kMacro:Options_BuildMacroOptions();
	-- Update
	-- Color Hex codes
	kMacro.colorHex = {};
	kMacro.colorHex['green'] = kMacro:RGBToHex(0,255,0);
	kMacro.colorHex['red'] = kMacro:RGBToHex(255,0,0);
	kMacro.colorHex['yellow'] = kMacro:RGBToHex(255,255,0);
	kMacro.colorHex['white'] = kMacro:RGBToHex(255,255,255,1);
	kMacro.colorHex['grey'] = kMacro:RGBToHex(128,128,128);
	kMacro.colorHex['orange'] = kMacro:RGBToHex(255,165,0);
	kMacro.colorHex['gold'] = kMacro:RGBToHex(175,150,0);
	kMacro.colorHex['test'] = kMacro:RGBToHex(100,255,0);
end

function kMacro:AddMacro(name, isGeneral, instanceName)
	local lowIndex = isGeneral and 1 or 37;
	local highIndex = isGeneral and 36 or 54;
	local currentName, currentTexture, currentBody;
	local matchFound = false;
	-- Check if macro exists with name in appropriate location
	for iMacro=lowIndex,highIndex do
		currentName, currentTexture, currentBody = GetMacroInfo(iMacro)
		kMacro:Debug(currentName)
		if name == currentName then 
			matchFound = iMacro
			break
		end
	end
	if not matchFound then 
		print('No matching macro exists to overwrite');
		return
	end
	local macro = {
		activation = '',
		body = currentBody,
		id = kMacro:GetUniqueMacroId(),
		isGeneral = isGeneral,
		instanceName = instanceName,
		name = name,		
		visible = true,
	}	
	tinsert(self.db.profile.macros.list, macro);
end
function kMacro:DeleteMacro(id)
	-- Check not in combat
	if InCombatLockdown() then return end
	for i,v in pairs(self.db.profile.macros.list) do
		-- find match
		if v.id == id then
			kMacro:Debug('delete:'..v.id)
			self.db.profile.macros.list[i] = nil;
		end
	end
end
function kMacro:EnableMacro(macro)
	local lowIndex = isGeneral and 1 or 37;
	local highIndex = isGeneral and 36 or 54; 
	local currentName, currentTexture, currentBody;
	local index = 0;	
	for iMacro=lowIndex,highIndex do
		currentName, currentTexture, currentBody = GetMacroInfo(iMacro)
		if macro.name == currentName then 
			EditMacro(iMacro, nil, nil, macro.body)
			kMacro:Debug('Enable '..iMacro..': '..macro.name)
			return true
		end
	end
end
function kMacro:GetUniqueMacroId()
	local newId
	local isValidId = false;
	while isValidId == false do
		matchFound = false;
		newId = (math.random(0,2147483647) * -1);
		for i,val in pairs(self.db.profile.macros.list) do
			if val.id == newId then
				matchFound = true;
			end
		end
		if matchFound == false then
			isValidId = true;
		end
	end
	return newId;
end
function kMacro:SaveMacro(id)
	-- Check not in combat
	if InCombatLockdown() then return end
	for i,v in pairs(self.db.profile.macros.list) do
		-- find match
		if v.id == id then
			kMacro:Debug(v.id)
			-- Verify activation
			if v.activation and kMacro:VerifyMacroActivation(v.activation) == true then
				-- Check that macro matches in system
				local lowIndex = v.isGeneral and 1 or 37;
				local highIndex = v.isGeneral and 36 or 54;
				local currentName, currentTexture, currentBody;
				local matchIndex = false;
				-- Check if macro exists with name in appropriate location
				for iMacro=lowIndex,highIndex do
					currentName, currentTexture, currentBody = GetMacroInfo(iMacro)
					if v.name == currentName then 
						matchIndex = iMacro
						kMacro:Debug(matchIndex)											
						break
					end
				end
				if matchIndex then 
					EditMacro(matchIndex, nil, nil, v.body)
					return true;
				end
			end
		end
	end
end
function kMacro:UpdateAllMacros()
	for iMacro,vMacro in pairs(self.db.profile.macros.list) do
		-- Check if identical name exists in same category (general or char) by checking name and diffIndex
		local matchCount = kMacro:GetMacroCountByName(vMacro.name, vMacro.isGeneral);
		if matchCount > 1 then
			kMacro:Print('Cannot have 2 or more standard macros with the same name in the same category.')
		elseif not matchCount then
			kMacro:Print(("Standard macro doesn't exist to match the auto-macro with the name: %s."):format(vMacro.name))
		elseif matchCount == 1 then
			-- Good, continue
			-- Check activation
			if vMacro.activation and kMacro:VerifyMacroActivation(vMacro.activation) == true then
				-- Enable macro
				kMacro:EnableMacro(vMacro);
			end
		end
	end
end
function kMacro:GetMacroCountByName(name, isGeneral)
	local lowIndex = isGeneral and 1 or 37;
	local highIndex = isGeneral and 36 or 54; 
	local currentName, currentTexture, currentBody;
	local matchCount = 0;	
	for iMacro=lowIndex,highIndex do
		currentName, currentTexture, currentBody = GetMacroInfo(iMacro)
		if name == currentName then 
			matchCount = matchCount + 1;
		end
	end
	return matchCount;
end
function kMacro:VerifyMacroActivation(code)
	local loadedFunction, errorString = loadstring('return '..tostring(code))
	if errorString then
		return errorString
	else
		local func = assert(loadedFunction)()
		return func;
	end
end